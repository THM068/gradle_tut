apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

buildscript {
	ext {
		springBootVersion = '1.3.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}



jar {
	baseName = 'demo'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-actuator-docs')
	compile('org.springframework.boot:spring-boot-starter-remote-shell')
	testCompile('org.springframework.boot:spring-boot-starter-test')
    compile("org.codehaus.groovy:groovy-all:2.4.3")
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task hello {
	doLast {
		println 'Hello, Jeremy'
	}
}

task putOnSocks {
	description 'putonsocks description'
	group 'putonsocks group ...'
	doLast {
		println 'Putting on socks'
	}
}


task putOnShoes {
	dependsOn 'putOnSocks'
	doLast {
		println 'Putting on shoes'
	}
}

task eatBreakfast {
	finalizedBy 'brushYourTeeth'
	doLast {
		println 'Eat munch breakfast ...'
	}
}

task brushYourTeeth {
	doLast {
		println 'Brushie brushie brushie ...>'
	}
}


task takeShower {
	doLast {
		println 'Taking a shower'
	}
}

task putOnFragrance {
	shouldRunAfter 'takeShower'
    doLast {
        println 'Putting on fragrance'
    }
}

task getReady {
    dependsOn = [ 'takeShower', 'eatBreakfast', 'putOnShoes']
}

putOnShoes.mustRunAfter takeShower


task getEquipped {
    dependsOn tasks.matching { task ->
        task.name.startsWith('putOn')
    }
    doLast {
        println 'All geared up'
    }
}

//-----------------------------
task brew {
    doLast {
        println "Brewing. Drip, drip, drip."
    }
}

task pour {
    dependsOn 'brew'
    doLast {
        println "Pouring. Glug, glug, glug."
    }
}

task drink {
    dependsOn 'pour'
    mustRunAfter 'addSweetener'
    doLast {
        println "Drinking. Gulp, gulp, gulp."
    }
}

task addSweetener {
    dependsOn 'pour'
    doLast {
        println "Adding sweetener. Stir, stir, stir."
    }
}

task blackCoffee {
    dependsOn 'drink'
    doLast {
        println "Mmmm, bitter! just how I like it."
    }
}

task sweetCoffee {
    dependsOn = ['drink', 'addSweetener']
    doLast {
        println "Mmmm, sweet! just how I like it."
    }
}

task copyImages(type: Copy) {
	from 'images'
    include '*ext2.txt'
	into 'build'
}

task copyImageFolder(type: Copy) {
    from('images') {
        include '*.jpg'
        into 'jpg'
    }

    from('images') {
        include '*.txt'
        into 'txt'
    }

    into 'build' //destination directory
}

task zipImages(type: Zip) {
    baseName = 'images'
    destinationDir = file('build')
    from 'images'
}

task deleteBuild(type: Delete) {
    delete 'build'
}

task copyWeb(type: Copy) {
    from('src/web/images') {
        include '*.jpg'
        into 'web/images'
    }

    from('src/web') {
        include '*.html'
        into 'web'
    }

    from('src/docs') {
        include '*.txt'
        into 'web/help'
    }

    into 'build'
}

task bundleWeb(type: Zip, dependsOn: copyWeb){
    baseName = 'web'
    destinationDir = file('build')

    from('build/web') {
        include 'help/**'
    }

    from('build/web') {
        include '*.html'
    }
}

task unpackBundle(type: Copy, dependsOn: bundleWeb) {
    from zipTree('build/web.zip')
    into 'build/exploded'
}

task deleteHelp(type: Delete, dependsOn: copyWeb) {
    delete 'build/web/help'
}

ext {
    greeting='Hello from the buildscript'
}

task printGreetings {
    doLast {
        println greeting
    }
    println 'This is run during the configuration phase'
}

task helloName(type: com.sky.HelloName) {
    setName 'Kerrie Channer'
    //enabled = false
}

task helloTask(type: com.sky.HelloTask)

